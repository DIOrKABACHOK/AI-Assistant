import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import requests

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BASE_URL = "http://127.0.0.1:5000"

INPUT_QUERY, GET_LOCATION = range(2)


class TelegramBot:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self._register_handlers()

    def _main_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        return ReplyKeyboardMarkup([
            ["üå§ –ü–æ–≥–æ–¥–∞", "üõç –¢–æ–≤–∞—Ä—ã"],
            ["üçî –ï–¥–∞", "üç¥ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã"],
            ["üè® –û—Ç–µ–ª–∏", "üìç –ê–¥—Ä–µ—Å"],
            ["üåê –í–µ–±-–ø–æ–∏—Å–∫", "üîç –ú–µ—Å—Ç–∞"],
            ["üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫"]
        ], resize_keyboard=True)

    def _cancel_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
        return ReplyKeyboardMarkup([["üö´ –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_main_menu)],
            states={
                INPUT_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text_input)],
                GET_LOCATION: [
                    MessageHandler(filters.LOCATION, self._handle_location),
                    MessageHandler(filters.TEXT, self._handle_location_text)
                ]
            },
            fallbacks=[CommandHandler("cancel", self._cancel)],
        )

        self.application.add_handler(conv_handler)
        self.application.add_error_handler(self._error_handler)

    async def _handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        context.user_data.clear()

        if text == "üå§ –ü–æ–≥–æ–¥–∞":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                    ["üö´ –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
            )
            return GET_LOCATION

        elif text == "üõç –¢–æ–≤–∞—Ä—ã":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=self._cancel_keyboard())
            context.user_data["action"] = "products"
            return INPUT_QUERY

        elif text == "üçî –ï–¥–∞":
            await update.message.reply_text("–ß—Ç–æ –∏—â–µ–º –∏–∑ –µ–¥—ã?", reply_markup=self._cancel_keyboard())
            context.user_data["action"] = "food"
            return INPUT_QUERY

        elif text == "üç¥ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                    ["üö´ –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
            )
            context.user_data["action"] = "restaurants"
            return GET_LOCATION

        elif text == "üè® –û—Ç–µ–ª–∏":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                    ["üö´ –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
            )
            context.user_data["action"] = "hotels"
            return GET_LOCATION

        elif text == "üìç –ê–¥—Ä–µ—Å":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                    ["üö´ –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
            )
            context.user_data["action"] = "address"
            return GET_LOCATION

        elif text == "üåê –í–µ–±-–ø–æ–∏—Å–∫":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", reply_markup=self._cancel_keyboard())
            context.user_data["action"] = "web"
            return INPUT_QUERY

        elif text == "üîç –ú–µ—Å—Ç–∞":
            await update.message.reply_text(
                "–ß—Ç–æ –∏—â–µ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∞–ø—Ç–µ–∫–∞, –±–∞–Ω–∫–æ–º–∞—Ç)",
                reply_markup=self._cancel_keyboard()
            )
            context.user_data["action"] = "places"
            return INPUT_QUERY

        elif text == "üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:", reply_markup=self._cancel_keyboard())
            context.user_data["action"] = "exact"
            return INPUT_QUERY

        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:", reply_markup=self._main_keyboard())
        return ConversationHandler.END

    async def _handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        text = update.message.text

        if text == "üö´ –û—Ç–º–µ–Ω–∞":
            return await self._cancel(update, context)

        action = context.user_data.get("action")
        query = text

        if action == "products":
            response = requests.get(f"{BASE_URL}/search_products", params={"query": query})
            if response.status_code == 200:
                data = response.json()
                message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:\n\nüîó Ozon: {data['ozon_link']}\nüîó Wildberries: {data['wildberries_link']}"

        elif action == "food":
            response = requests.get(f"{BASE_URL}/search_food", params={"query": query})
            if response.status_code == 200:
                data = response.json()
                message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –µ–¥—ã:\n\nüîó –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç: {data['yandex_market_link']}\nüîó –°–±–µ—Ä–ú–∞—Ä–∫–µ—Ç: {data['sbermarket_link']}"

        elif action == "web":
            response = requests.get(f"{BASE_URL}/search_web", params={"query": query})
            if response.status_code == 200:
                data = response.json()
                message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\nüîç Google: {data['google_link']}\nüîç –Ø–Ω–¥–µ–∫—Å: {data['yandex_link']}"

        elif action == "places":
            context.user_data["query"] = query
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
                    ["üö´ –û—Ç–º–µ–Ω–∞"]
                ], resize_keyboard=True)
            )
            return GET_LOCATION

        elif action == "exact":
            response = requests.get(f"{BASE_URL}/search_exact", params={"query": query})
            if response.status_code == 200:
                data = response.json()
                if "error" in data:
                    message = "‚ùå " + data["error"]
                else:
                    message = (
                        f"üìç {data['name']}\n"
                        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
                        f"–†–µ–π—Ç–∏–Ω–≥: {data.get('rating', '–ù/–î')}\n"
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É: {data['map_link']}"
                    )

        if response.status_code != 200:
            message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"

        await update.message.reply_text(message, disable_web_page_preview=True)
        return await self._return_to_main(update)

    async def _handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        location = update.message.location
        lat = location.latitude
        lon = location.longitude
        action = context.user_data.get("action")

        try:
            if action == "weather":
                response = requests.get(f"{BASE_URL}/get_weather", params={"lat": lat, "lon": lon})
                if response.status_code == 200:
                    data = response.json()
                    message = (
                        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {data['city']}:\n"
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}¬∞C\n"
                        f"üí® –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['feels_like']}¬∞C\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['humidity']}%\n"
                        f"üåÄ –î–∞–≤–ª–µ–Ω–∏–µ: {data['pressure']} hPa\n"
                        f"üå™ –í–µ—Ç–µ—Ä: {data['wind_speed']} –º/—Å\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
                    )

            elif action == "restaurants":
                response = requests.get(f"{BASE_URL}/find_restaurants", params={"lat": lat, "lon": lon})
                message = self._format_places(response, "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã")

            elif action == "hotels":
                response = requests.get(f"{BASE_URL}/find_hotels", params={"lat": lat, "lon": lon})
                message = self._format_places(response, "–û—Ç–µ–ª–∏")

            elif action == "address":
                response = requests.get(f"{BASE_URL}/get_address", params={"lat": lat, "lon": lon})
                if response.status_code == 200:
                    data = response.json()
                    message = f"üìç –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:\n{data.get('address', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É: {data.get('map_link', '')}"

            elif action == "places":
                query = context.user_data.get("query")
                response = requests.get(f"{BASE_URL}/find_places", params={
                    "lat": lat,
                    "lon": lon,
                    "query": query
                })
                message = self._format_places(response, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")

            if response.status_code != 200:
                message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"

        except Exception as e:
            logger.error(f"Error: {str(e)}")
            message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"

        await update.message.reply_text(message, disable_web_page_preview=True)
        return await self._return_to_main(update)

    async def _handle_location_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã"""
        text = update.message.text

        if text == "üö´ –û—Ç–º–µ–Ω–∞":
            return await self._cancel(update, context)

        city = text
        response = requests.get(f"{BASE_URL}/get_weather", params={"q": city})

        if response.status_code == 200:
            data = response.json()
            if "error" in data:
                message = "‚ùå " + data["error"]
            else:
                message = (
                    f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {data['city']}:\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}¬∞C\n"
                    f"üí® –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['feels_like']}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['humidity']}%\n"
                    f"üåÄ –î–∞–≤–ª–µ–Ω–∏–µ: {data['pressure']} hPa\n"
                    f"üå™ –í–µ—Ç–µ—Ä: {data['wind_speed']} –º/—Å\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
                )
        else:
            message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

        await update.message.reply_text(message)
        return await self._return_to_main(update)

    def _format_places(self, response, title):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç"""
        if response.status_code == 200:
            places = response.json()
            if not places:
                return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

            message = [f"üè∑ {title}:"]
            for place in places[:5]:
                message.append(
                    f"\nüìç {place.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                    f"–ê–¥—Ä–µ—Å: {place.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–†–µ–π—Ç–∏–Ω–≥: {place.get('rating', '–ù/–î')}\n"
                    f"–°—Å—ã–ª–∫–∞: {place.get('map_link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n"
                )
            return "\n".join(message)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

    async def _return_to_main(self, update: Update):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self._main_keyboard())
        return ConversationHandler.END

    async def _cancel(self, update: Update):
        """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=self._main_keyboard())
        return ConversationHandler.END

    async def _error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error("–û—à–∏–±–∫–∞: %s", context.error, exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=self._main_keyboard())

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()


if __name__ == "__main__":
    bot = TelegramBot("7828093872:AAGp7KAHGfnINWO2H27NXX8fvlh4XxZrWAU")
    bot.run()
